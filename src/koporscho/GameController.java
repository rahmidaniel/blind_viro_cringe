package koporscho;
import graphic.*;
import graphic.IViewable;

import java.util.*;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Koporscho csapat Projlab 
//  @ File Name : GameController.java
//  @ Date : 2022. 03. 25.
//  @ Authors : Szab� Egon, Bir� Ferenc, T�th B�lint, Ferge M�t�, Rahmi D�niel
//
//

/**
 * A körökért és a bemenetek kezeléséért felelős osztály.
 */
public class GameController implements IViewable {
	/** Az aktuális játék játékterét tárolja.*/
	private GameMap gameMap;
	static private GameController gc = new GameController();
	/** A játékban szereplő karaktereket tárolja.*/
	private ArrayDeque<Character> chQueue = new ArrayDeque<>();
	/** A játékban szereplő ágenseket tárolja.*/
	private ArrayList<Agent> agents = new ArrayList<>();
	/** A játékban szereplő felszereléseket tárolja.*/
	private ArrayList<Equipment> equipment = new ArrayList<>();

	private static GameController instance=null;
	public static GameController getInstance(){
		if (instance == null) instance = new GameController();
		return instance;
	}

	private boolean gameRunning=false;
	private ArrayList<View> views = new ArrayList<View>();

	public Virologist GetCurrentVirologist() {
		return (Virologist)chQueue.getFirst();
	}
	public boolean GameRunning() {
		return gameRunning;
	}

	public boolean Move(int fieldID) {
		if(fieldID<1 || fieldID > GetCurrentVirologist().GetField().GetNeighbors().size())
			return false;

		Field tmp=GetCurrentVirologist().GetField().GetNeighbors().get(fieldID-1);
		GetCurrentVirologist().Move(tmp);
		NotifyViews();
		return  true;
	}

	public boolean ApplyAgent(int targetID, int agentID) {
		if( targetID<1 ||targetID > GetCurrentVirologist().GetField().GetCharacters().size()
				|| agentID<1 || agentID>GetCurrentVirologist().GetAgentInventory().size())
			return false;

		Character target=GetCurrentVirologist().GetField().GetCharacters().get(targetID-1);
		Agent agent=GetCurrentVirologist().GetAgentInventory().get(agentID-1);
		GetCurrentVirologist().ApplyAgent(target,agent);
		NotifyViews();
		return  true;
	}

	public boolean CraftAgent(int agentID) {
		if(agentID<1 || agentID >GetCurrentVirologist().GetRecipes().size())
			return false;

		Agent agent = GetCurrentVirologist().GetRecipes().get(agentID-1);
		GetCurrentVirologist().CraftAgent(agent);
		NotifyViews();
		return true;
	}

	public boolean DropEquipment(int equipmentID) {
		if(equipmentID<1 ||equipmentID > GetCurrentVirologist().GetEquipment().size())
			return false;

		Equipment targetEquipment = GetCurrentVirologist().GetEquipment().get(equipmentID-1);
		GetCurrentVirologist().RemoveEquipment(targetEquipment);
		NotifyViews();
		return true;
	}

	public boolean Interact() {
		if(GetCurrentVirologist().GetField()==null)
			return false;

		GetCurrentVirologist().Interact();
		NotifyViews();
		return true;
	}

	public boolean Chop(int targetID) {
		if(targetID<1 ||targetID > GetCurrentVirologist().GetField().GetCharacters().size())
			return false;

		Character targetCharacter = GetCurrentVirologist().GetField().GetCharacters().get(targetID-1);
		GetCurrentVirologist().Chop((Virologist)targetCharacter);
		NotifyViews();
		return true;
	}

	public boolean StealEquipment(int targetID, int equipmentID) {
		if(targetID<1 ||targetID > GetCurrentVirologist().GetField().GetCharacters().size()
				|| equipmentID<1 || equipmentID > GetCurrentVirologist().GetEquipment().size())
			return false;

		Character target = GetCurrentVirologist().GetField().GetCharacters().get(targetID-1);
		Equipment targetEquipment = GetCurrentVirologist().GetEquipment().get(equipmentID-1);
		GetCurrentVirologist().StealEquipment(target, targetEquipment);
		NotifyViews();
		return true;
	}

	/** Elindítja a játékot a paraméterként megadott karakterekkel, ágensekkel és felszerelésekkel.*/
	public void StartGame(ArrayDeque<Character> c, ArrayList<Agent> a, ArrayList<Equipment> e) {
		gameRunning=true;
		gameMap = new GameMap(c, a, e);
		chQueue.addAll(c);
		agents.addAll(a);
		equipment.addAll(e);
		NotifyViews();
	}
	
	/** Leállítja a játékot, a paraméterként megadott karaktert kihirdetve győztesnek.*/
	public void EndGame(Character c) {
		System.out.println(((Virologist)c).GetName()+" a győztes!");
		gameRunning=false;
		NotifyViews();
	}
	
	/** Lépteti a játékot, a következő játékos körét indítja el.*/
	public void NextTurn() {
		if(agents.size() != 0 && chQueue.element().GetRecipeCount()== agents.size()) {
			EndGame(chQueue.element());
			return;
		}
		chQueue.add(chQueue.remove());
		((Virologist)chQueue.element()).RefreshAP();
		chQueue.element().Tick();
		NotifyViews();
	}

	/**
	 *Hozzáad egy karaktert a játékhoz.
	 * @param c Új karakter
	 */
	public void AddCharacter(Character c) {
		chQueue.add(c);
	}

	/**
	 * Hozzáad egy ágenst a játékhoz.
	 * @param a Új ágens
	 */
	public void AddAgent(Agent a) {
		agents.add(a);
	}

	/**
	 *	Alaphelyzetbe állítja a GameControllert.
	 */
	public void Reset() {
		gameRunning = false;
		gc = new GameController();
		chQueue.clear();
		agents.clear();
		equipment.clear();
		NotifyViews();
	}

	public void NotifyViews() {
		for(View v: views){
			v.Redraw(this);
		}
	}

	public void AddView(View view) {
		views.add(view);
	}

	public void RemoveView(View view) {
		views.remove(view);
	}
}
